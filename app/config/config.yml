imports:
    - { resource: parameters.yml }
    - { resource: security.yml }

framework:
    #esi:             ~
    #translator:      { fallback: %locale% }
    translator:      ~
    secret:          %secret%
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
    default_locale:  "%locale%"
    trusted_proxies: ~
    session:         ~
    fragments:       ~

# Twig Configuration
twig:
    debug:            %kernel.debug%
    strict_variables: %kernel.debug%
    form:
        resources:
            - 'SonataAdminBundle:Form:silex_form_div_layout.html.twig'
            - 'SonataFormatterBundle:Form:formatter.html.twig'

# Assetic Configuration
assetic:
    debug:          %kernel.debug%
    use_controller: false
    bundles:        [ ]
    #java: /usr/bin/java
    filters:
        cssrewrite: ~
        #closure:
        #    jar: %kernel.root_dir%/Resources/java/compiler.jar
        #yui_css:
        #    jar: %kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar

# Doctrine Configuration
doctrine:
    dbal:
        driver:   %database_driver%
        host:     %database_host%
        port:     %database_port%
        dbname:   %database_name%
        user:     %database_user%
        password: %database_password%
        charset:  UTF8
        # if using pdo_sqlite as your database driver, add the path in parameters.yml
        # e.g. database_path: %kernel.root_dir%/data/data.db3
        # path:     %database_path%
        types:
            json: Sonata\Doctrine\Types\JsonType

    orm:
        auto_generate_proxy_classes: %kernel.debug%
        entity_managers:
            default:
                auto_mapping: true
                mappings:
                    ApplicationSonataPageBundle: ~
                    SonataPageBundle: ~
                    SonataNotificationBundle: ~
                    SonataMediaBundle: ~
                    ApplicationSonataMediaBundle: ~

# Swiftmailer Configuration
swiftmailer:
    transport: %mailer_transport%
    host:      %mailer_host%
    username:  %mailer_user%
    password:  %mailer_password%
    spool:     { type: memory }

sonata_cache:
    caches:
        esi:
            token: %secret% # a random one is generated by default
            servers:
                - varnishadm -T 127.0.0.1:2000 {{ COMMAND }} "{{ EXPRESSION }}"

        ssi:
            token: %secret% # a random one is generated by default
#
#        mongo:
#            database:   cache
#            collection: cache
#            servers:
#                - { host: 127.0.0.1, port: 27017, user: username, password: pASS' }
#                - { host: 127.0.0.2 }
#
#        memcached:
#            prefix: test     # prefix to ensure there is no clash between instances
#            servers:
#                - { host: 127.0.0.1, port: 11211, weight: 0 }
#
#        apc:
#            token:  s3cur3   # token used to clear the related cache
#            prefix: test     # prefix to ensure there is no clash between instances
#            servers:
#                - { domain: kooqit.local, ip: 127.0.0.1, port: 80 }

sonata_block:
    default_contexts: [cms]
    context_manager: sonata.page.block.context_manager
    blocks:
        sonata.admin.block.admin_list:
            contexts:   [admin]

        #sonata.admin_doctrine_orm.block.audit:
        #    contexts:   [admin]

        sonata.page.block.children_pages:
        sonata.block.service.text:
        sonata.block.service.rss:
        sonata.formatter.block.formatter:

        # Some specific block from the SonataMediaBundle
        #sonata.media.block.media:
        #sonata.media.block.gallery:
        #sonata.media.block.feature_media:

sonata_seo:
    default:          sonata.seo.page.default
    encoding:         UTF-8
    page:
        title:            Apilogic 2
        metas:
            name:
                keywords:             foo bar
                description:          The description
                robots:               index, follow

            property:
                # Facebook application settings
                #'fb:app_id':          XXXXXX
                #'fb:admins':          admin1, admin2

                # Open Graph information
                # see http://developers.facebook.com/docs/opengraphprotocol/#types or http://ogp.me/
                'og:site_name':       Apilogic 2
                'og:description':     A demo of the some rich bundles for your Symfony2 projects

            http-equiv:
                'Content-Type':         text/html; charset=utf-8
                #'X-Ua-Compatible':      IE=EmulateIE7

        head:
            'xmlns':              http://www.w3.org/1999/xhtml
            'xmlns:og':           http://opengraphprotocol.org/schema/
            #'xmlns:fb':           "http://www.facebook.com/2008/fbml"

sonata_notification:
    backend: sonata.notification.backend.runtime

#symfony_cmf_routing:
#    chain:
#        routers_by_id:
#            # enable the DynamicRouter with high priority to allow overwriting configured routes with content
#            #symfony_cmf_routing_extra.dynamic_router: 200
#            # enable the symfony default router with a lower priority
#            sonata.page.router: 150
#            router.default: 100

sonata_page:
    multisite: host
    use_streamed_response: true # set the value to false in debug mode or if the reverse proxy does not handle streamed response
    ignore_route_patterns:
        - ^(.*)admin(.*)   # ignore admin route, ie route containing 'admin'
        - ^_(.*)          # ignore symfony routes

    ignore_routes:
        - sonata_page_esi_cache
        - sonata_page_ssi_cache
        - sonata_page_js_sync_cache
        - sonata_page_js_async_cache
        - sonata_cache_esi
        - sonata_cache_ssi
        - sonata_cache_js_async
        - sonata_cache_js_sync
        - sonata_cache_apc

    ignore_uri_patterns:
        - ^/admin(.*)   # ignore admin route, ie route containing 'admin'

    page_defaults:
        homepage: { decorate: false } # disable decoration for homepage, key - is a page route

    default_template: default # template key from templates section, used as default for pages
    templates:
        default: { path: 'SonataPageBundle::layout.html.twig', name: default }

    # manage the http errors
    catch_exceptions:
        not_found: [404]    # render 404 page with "not_found" key (name generated: _page_internal_error_{key})
        fatal:     [500]    # so you can use the same page for different http errors or specify specific page for each error

# Configuration KNP Menu
knp_menu:
    twig:  # use "twig: false" to disable the Twig extension and the TwigRenderer
        template: knp_menu.html.twig
    templating: false # if true, enables the helper for PHP templates
    default_renderer: twig # The renderer to use, list is also available by default

sonata_user:
    security_acl: true
    manager_type: orm # can be orm or mongodb

fos_user:
    db_driver:      orm # can be orm or odm
    firewall_name:  main
    user_class:     Application\Sonata\UserBundle\Entity\User
#    user_class: Apilogic\UserBundle\Entity\User
    group:
        group_class: Application\Sonata\UserBundle\Entity\Group

sonata_admin:
    templates:
        # default global templates
        layout:  SonataAdminBundle::layout.html.twig
#    security:
#        handler: sonata.admin.security.handler.acl
#        # acl security information
#        information:
#            GUEST:    [VIEW, LIST]
#            STAFF:    [EDIT, LIST, CREATE]
#            EDITOR:   [OPERATOR, EXPORT]
#            ADMIN:    [MASTER]
#        # permissions not related to an object instance and also to be available when objects do not exist
#        # the DELETE admin permission means the user is allowed to batch delete objects
#        admin_permissions: [CREATE, LIST, DELETE, UNDELETE, EXPORT, OPERATOR, MASTER]
#        # permission related to the objects
#        object_permissions: [VIEW, EDIT, DELETE, UNDELETE, OPERATOR, MASTER, OWNER]
#
#    title:      Sonata Project
#    title_logo: /bundles/sonataadmin/logo_title.png
#    templates:
#        # default global templates
#        layout:  SonataAdminBundle::standard_layout.html.twig
#        ajax:    SonataAdminBundle::ajax_layout.html.twig
#        dashboard: SonataAdminBundle:Core:dashboard.html.twig
#
#        # default actions templates, should extend a global templates
#        list:    SonataAdminBundle:CRUD:list.html.twig
#        show:    SonataAdminBundle:CRUD:show.html.twig
#        edit:    SonataAdminBundle:CRUD:edit.html.twig
#
#    dashboard:
#        blocks:
#            # display a dashboard block
#            - { position: left, type: sonata.admin.block.admin_list }
#
#            # Customize this part to add new block configuration
#            - { position: right, type: sonata.block.service.text, settings: { content: "<h2>Welcome to the Sonata Admin</h2> <p>This is a <code>sonata.block.service.text</code> from the Block Bundle, you can create and add new block in these area by configuring the <code>sonata_admin</code> section.</p> <br /> For instance, here a RSS feed parser (<code>sonata.block.service.rss</code>):"} }
#            - { position: right, type: sonata.block.service.rss, settings: { title: Sonata Project's Feeds, url: http://sonata-project.org/blog/archive.rss }}

    # set to true to persist filter settings per admin module in the user's session
    #persist_filters: false

sonata_formatter:
    formatters:
        markdown:
            service: sonata.formatter.text.markdown
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
                - sonata.media.formatter.twig

        text:
            service: sonata.formatter.text.text
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
                - sonata.media.formatter.twig

        rawhtml:
            service: sonata.formatter.text.raw
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
                - sonata.media.formatter.twig

        richhtml:
            service: sonata.formatter.text.raw
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
                - sonata.media.formatter.twig

        twig:
            service: sonata.formatter.text.twigengine
            extensions: [] # Twig formatter cannot have extensions

sonata_media:
    # if you don't use default namespace configuration
    #class:
    #    media: MyVendor\MediaBundle\Entity\Media
    #    gallery: MyVendor\MediaBundle\Entity\Gallery
    #    gallery_has_media: MyVendor\MediaBundle\Entity\GalleryHasMedia
    default_context: default
    db_driver: doctrine_orm # or doctrine_mongodb, doctrine_phpcr
    contexts:
        default:  # the default context is mandatory
            providers:
                - sonata.media.provider.dailymotion
                - sonata.media.provider.youtube
                - sonata.media.provider.image
                - sonata.media.provider.file

            formats:
                small: { width: 100 , quality: 70}
                big:   { width: 500 , quality: 70}

    cdn:
        server:
            path: /uploads/media # http://media.sonata-project.org/

    filesystem:
        local:
            directory:  %kernel.root_dir%/../web/uploads/media
            create:     false

    providers:
        image:
            resizer: sonata.media.resizer.square
            thumbnail:  sonata.media.thumbnail.consumer.format

